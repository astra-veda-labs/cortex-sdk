"""
YAML-based Memory Manager for Cortex SDK

Simple memory manager that switches between in-memory and Chroma backends
based on YAML configuration.
"""

from typing import List, Dict, Any, Optional
from ..config.yaml_config import get_yaml_config, BackendType
from ..backends.in_memory_backend import InMemoryBackend
from ..backends.chroma_backend import ChromaBackend
from ..backends.base_backend import BaseBackend, Memory, MemoryType, MemoryPriority, MemorySearchResult
from ..utils.logger import get_logger

logger = get_logger(__name__)


class YAMLMemoryManager:
    """YAML-based memory manager that switches between backends"""
    
    def __init__(self, config_file: str = "cortex_config.yaml"):
        """
        Initialize YAML memory manager
        
        Args:
            config_file: Path to YAML configuration file
        """
        self.config = get_yaml_config(config_file)
        self.backend: Optional[BaseBackend] = None
        self.initialized = False
        
        # Initialize backend
        self._initialize_backend()
    
    def _initialize_backend(self):
        """Initialize the configured backend"""
        try:
            current_backend = self.config.get_current_backend()
            
            if current_backend == "in_memory":
                backend_config = self.config.get_backend_config("in_memory")
                self.backend = InMemoryBackend(backend_config.get("config", {}))
                
            elif current_backend == "chroma":
                backend_config = self.config.get_backend_config("chroma")
                self.backend = ChromaBackend(backend_config.get("config", {}))
                
            else:
                logger.error(f"Unknown backend: {current_backend}")
                return
            
            # Initialize backend
            if self.backend.initialize():
                self.initialized = True
                logger.info(f"Initialized {current_backend} backend")
            else:
                logger.error(f"Failed to initialize {current_backend} backend")
                
        except Exception as e:
            logger.error(f"Error initializing backend: {e}")
    
    def switch_to_in_memory(self):
        """Switch to in-memory backend"""
        try:
            self.config.switch_to_in_memory()
            self._initialize_backend()
            logger.info("Switched to in-memory backend")
        except Exception as e:
            logger.error(f"Error switching to in-memory backend: {e}")
    
    def switch_to_chroma(self, persistent: bool = False, collection_name: str = "cortex_memories"):
        """Switch to Chroma backend"""
        try:
            self.config.switch_to_chroma(persistent=persistent, collection_name=collection_name)
            self._initialize_backend()
            logger.info(f"Switched to Chroma backend (persistent: {persistent})")
        except Exception as e:
            logger.error(f"Error switching to Chroma backend: {e}")
    
    def store_memory(
        self, 
        content: str, 
        memory_type: MemoryType = MemoryType.SHORT_TERM,
        priority: MemoryPriority = MemoryPriority.MEDIUM,
        metadata: Optional[Dict[str, Any]] = None,
        embedding: Optional[List[float]] = None
    ) -> bool:
        """
        Store a memory
        
        Args:
            content: Memory content
            memory_type: Type of memory
            priority: Memory priority
            metadata: Additional metadata
            embedding: Optional embedding vector
            
        Returns:
            True if successful, False otherwise
        """
        if not self.initialized or not self.backend:
            logger.error("Memory manager not initialized")
            return False
        
        try:
            memory = Memory(
                id="",  # Will be generated by backend
                content=content,
                memory_type=memory_type,
                priority=priority,
                metadata=metadata or {},
                embedding=embedding
            )
            
            success = self.backend.store_memory(memory)
            if success:
                logger.info(f"Stored memory in {memory_type.value} store")
            return success
            
        except Exception as e:
            logger.error(f"Error storing memory: {e}")
            return False
    
    def get_memory(self, memory_id: str) -> Optional[Memory]:
        """
        Get a memory by ID
        
        Args:
            memory_id: Memory identifier
            
        Returns:
            Memory object if found, None otherwise
        """
        if not self.initialized or not self.backend:
            return None
        
        try:
            return self.backend.get_memory(memory_id)
        except Exception as e:
            logger.error(f"Error retrieving memory: {e}")
            return None
    
    def recall(
        self,
        query: str,
        memory_type: Optional[MemoryType] = None,
        limit: int = 10,
        min_similarity: float = 0.5,
        filters: Optional[Dict[str, Any]] = None
    ) -> List[MemorySearchResult]:
        """
        Recall memories using semantic search
        
        Args:
            query: Search query
            memory_type: Optional memory type filter
            limit: Maximum number of results
            min_similarity: Minimum similarity threshold
            filters: Additional filters
            
        Returns:
            List of search results
        """
        if not self.initialized or not self.backend:
            logger.error("Memory manager not initialized")
            return []
        
        try:
            results = self.backend.search_memories(
                query=query,
                memory_type=memory_type,
                limit=limit,
                min_similarity=min_similarity,
                filters=filters
            )
            
            logger.info(f"Recalled {len(results)} memories for query: '{query}'")
            return results
            
        except Exception as e:
            logger.error(f"Error recalling memories: {e}")
            return []
    
    def delete_memory(self, memory_id: str) -> bool:
        """
        Delete a memory by ID
        
        Args:
            memory_id: Memory identifier
            
        Returns:
            True if successful, False otherwise
        """
        if not self.initialized or not self.backend:
            return False
        
        try:
            success = self.backend.delete_memory(memory_id)
            if success:
                logger.info(f"Deleted memory {memory_id}")
            return success
            
        except Exception as e:
            logger.error(f"Error deleting memory: {e}")
            return False
    
    def clear_memories(self, memory_type: Optional[MemoryType] = None) -> bool:
        """
        Clear memories
        
        Args:
            memory_type: Optional memory type filter
            
        Returns:
            True if successful, False otherwise
        """
        if not self.initialized or not self.backend:
            return False
        
        try:
            success = self.backend.clear_memories(memory_type)
            if success:
                logger.info(f"Cleared memories (type: {memory_type.value if memory_type else 'all'})")
            return success
            
        except Exception as e:
            logger.error(f"Error clearing memories: {e}")
            return False
    
    def get_memory_count(self, memory_type: Optional[MemoryType] = None) -> int:
        """
        Get memory count
        
        Args:
            memory_type: Optional memory type filter
            
        Returns:
            Memory count
        """
        if not self.initialized or not self.backend:
            return 0
        
        try:
            return self.backend.get_memory_count(memory_type)
        except Exception as e:
            logger.error(f"Error getting memory count: {e}")
            return 0
    
    def get_backend_info(self) -> Dict[str, Any]:
        """Get backend information"""
        if not self.initialized or not self.backend:
            return {"initialized": False}
        
        try:
            info = self.backend.get_backend_info()
            info["config_file"] = self.config.config_file
            info["current_backend"] = self.config.get_current_backend()
            return info
        except Exception as e:
            logger.error(f"Error getting backend info: {e}")
            return {"error": str(e)}
    
    def is_initialized(self) -> bool:
        """Check if memory manager is initialized"""
        return self.initialized
    
    def get_active_backend_type(self) -> str:
        """Returns the type of the currently active backend."""
        return self.config.get_current_backend()
